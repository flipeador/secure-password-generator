.background {
  position: fixed;
  inset: 0;
  opacity: .8;
  filter: blur(80px);
  z-index: -1;
}

.background > div {
  position: absolute;
  inset: 0;
  scale: .7;
  border-radius: 50%;
  background: conic-gradient(
    #001979,
    #003d7b,
    #00C9FF,
    #242f67,
    #3724a1,
    #00166b
  );
  animation: spin 10s linear infinite;
}

@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(1turn); }
}

html {
  --clr-bg: #0B1221AA;
  --clr-hg: #00ff7AAA;

  --clr-bgn-input: #FFFFFF0A;
  --clr-bgh-input: #FFFFFF1A;
  --clr-olf-input: #929292;
  --clr-bsn-input: lightsteelblue;

  color: #E1E1E1;
  background: black;
}

html, body {
  width: fit-content;
  height: fit-content;
}

*, *::before, *::after {
  box-sizing: border-box;
  margin: 0px;
  font-family: "IBM Plex Sans", "Trebuchet MS", sans-serif;
  color: inherit;
  overflow-wrap: break-word;
  hyphens: auto;
}

*:disabled {
  opacity: .5;
  pointer-events: none;
}

@starting-style {
  body {
    opacity: 0;
  }
}

body {
  background: transparent;
  transition: opacity .5s;
}

span {
  text-wrap: nowrap;
  align-content: center;
}

input[type="number"] {
  /* Firefox: Hide stepper arrows. */
  appearance: textfield;
}

/* Chrome: Hide stepper arrows. */
input[type=number]::-webkit-inner-spin-button {
  appearance: none;
}

input, select {
  width: 100%;
}

input, select, button {
  padding: .2em .5em;
  outline: none;
  border-radius: 5px;
  border: none;
  background: var(--clr-bgn-input);
  box-shadow: 0 0 2px lightsteelblue;
  transition:
    color .2s linear,
    background-color .2s linear;
}

select > option {
  color: initial;
}

button:hover {
  color: black;
  background: var(--clr-hg);
}

input:not(:disabled):hover,
select:not(:disabled):hover {
  background: var(--clr-bgh-input);
}

input:focus-visible,
select:focus-visible,
button:focus-visible {
  outline: 1px dashed var(--clr-olf-input);
}

.tab {
  display: flex;
  gap: 1em;
  /*
    The window size adapts to its content due to 'fit-content'.
    But we want the tab buttons to not influence the window min-width.
    We use 'inline-size' so that the tab size can be computed in isolation.
  */
  contain: inline-size;
  /*
    Use 'overflow-x' to make the tab buttons scrolleable horizontally.
    The overflow is hidden so that the user does not see the scrollbar.
    We translate vertical scroll to horizontal scroll with javascript.
  */
  overflow-x: hidden;
  overscroll-behavior: contain;
}

.tab > button {
  position: relative;
  font-weight: bold;
  text-wrap: nowrap;
  padding: .5em 1em;
  background: transparent;
  box-shadow: none;
}

.tab > button:hover {
  color: var(--clr-hg);
}

.tab > button[open] {
  background: var(--clr-bg);
  border-top-left-radius: 5px;
  border-top-right-radius: 5px;
}

.tab > button[open]:after {
  content: '';
  position: absolute;
  inset: auto auto 0 1em;
  width: calc(100% - 2em);
  height: 2px;
  background: var(--clr-hg);
  view-transition-name: open-tab;
}

.tab-content {
  display: none;
  gap: 1em;
}

.tab-content[open] {
  display: grid;
}

.tab-content[tab="1-1"] {
  grid-template-columns: 1fr 23ch 10ch;
}

.tab-content[tab="1-2"] {
  grid-template-columns: auto 1fr;
}

main {
  display: grid;
  padding: 1em;
  background: var(--clr-bg);
  gap: 1em;
}

#exhaustive-randomized-transfer {
  grid-column: 1 / 4;
}

.password {
  display: flex;
  grid-column: 1 / 3;
  gap: 1em;
}

.password > button {
  view-transition-name: password-eye;
}

.qr-code {
  grid-column: 1 / 3;
  margin-inline: auto;
  width: max-content;
  border: 2px solid white;
}
