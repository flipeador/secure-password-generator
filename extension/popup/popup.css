.background {
  position: fixed;
  inset: 0;
  opacity: .8;
  filter: blur(80px);
  z-index: -999;
}

.background > div {
  position: absolute;
  inset: 0;
  scale: .7;
  border-radius: 50%;
  background: conic-gradient(
    #001979,
    #003d7b,
    #00C9FF,
    #242f67,
    #3724a1,
    #00166b
  );
  animation: spin 10s linear infinite;
}

@keyframes spin {
  0% { transform: rotate(0deg); }
  100% { transform: rotate(1turn); }
}

html {
  --clr-bg: #0B1221AA;
  --clr-hl: #00ff7AAA;

  --clr-bgn-input: #FFFFFF0A;
  --clr-bgh-input: #FFFFFF1A;
  --clr-olf-input: #929292;
  --clr-bsn-input: lightsteelblue;

  color: #E1E1E1;
  background: black;
}

html, body {
  width: fit-content;
  height: fit-content;
}

*, *::before, *::after {
  box-sizing: border-box;
  margin: 0px;
  font-family: "IBM Plex Sans", "Trebuchet MS", sans-serif;
  font-size: inherit;
  color: inherit;
  overflow-wrap: break-word;
  hyphens: auto;
}

*:disabled {
  opacity: .5;
  pointer-events: none;
}

@starting-style {
  body {
    opacity: 0;
  }
}

body {
  background: transparent;
  transition: opacity .5s;
}

span {
  text-wrap: nowrap;
  align-content: center;
}

select:hover {
  background: var(--clr-bgh-input);
}

x-input, select {
  width: 100%;
}

x-input, button, select {
  height: 2em;
}

button, select {
  outline: none;
  border-radius: 5px;
  border: none;
  background: var(--clr-bgn-input);
  box-shadow: 0 0 2px lightsteelblue;
  transition:
    color .2s linear,
    background-color .2s linear;
}

button:focus-visible,
select:focus-visible {
  outline: 1px dashed var(--clr-olf-input);
}

select > option {
  color: initial;
}

button:hover {
  color: black;
  background: var(--clr-hl);
}

.tab {
  display: flex;
  gap: 1em;
  /*
    The window size adapts to its content due to 'fit-content'.
    But we want the tab buttons to not influence the window min-width.
    We use 'inline-size' so that the tab size can be computed in isolation.
  */
  contain: inline-size;
  /*
    Use 'overflow' to make the tab buttons scrolleable horizontally.
    The overflow is hidden so that the user does not see the scrollbar.
    We translate vertical scroll to horizontal scroll with javascript.
  */
  overflow: hidden;
  overscroll-behavior: contain;
}

.tab > button {
  position: relative;
  font-weight: bold;
  text-wrap: nowrap;
  padding: .5em 1em;
  background: transparent;
  box-shadow: none;
}

.tab > button:hover {
  color: var(--clr-hl);
}

.tab > button[open] {
  background: var(--clr-bg);
  border-top-left-radius: 5px;
  border-top-right-radius: 5px;
}

.tab > button[open]:after {
  content: '';
  position: absolute;
  inset: auto auto 0 1em;
  width: calc(100% - 2em);
  height: 2px;
  background: var(--clr-hl);
  view-transition-name: open-tab;
}

.tab-content {
  display: none;
  gap: 1em;
  align-items: center;
}

.tab-content[open] {
  display: grid;
}

.tab-content[tab="1-1"] {
  grid-template-columns: 1fr 23ch 10ch;
}

main {
  position: relative;
  padding: 1em;
  background: var(--clr-bg);
  z-index: 1;
}

#exhaustive-randomized-transfer {
  grid-column: 1 / 4;
}

#password {
  grid-column: 1 / 4;
}

#qr-code {
  --size: calc(256px + 12px);

  position: relative;
  margin-inline: auto;
  width: var(--size);
  height: var(--size);

  & > canvas {
    display: none;
  }

  & > img[src^=data] {
    border: 6px solid white;
  }

  & > img[src^=http] {
    border: 6px solid #FFFFFF10;
    border-radius: 50%;
  }
}
